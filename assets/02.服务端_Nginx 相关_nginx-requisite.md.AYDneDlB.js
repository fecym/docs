import{_ as i,c as a,o as n,aN as l}from"./chunks/framework.B3J4P44d.js";const e="/docs/imgs/nginx-proxy.jpg",p="/docs/imgs/nginx-proxy-cluster.jpg",g=JSON.parse('{"title":"反向代理与负载均衡","description":"","frontmatter":{"title":"反向代理与负载均衡","date":"2019-08-16T00:00:00.000Z","permalink":"/service/proxy","tags":["其他"],"categories":["Nginx"]},"headers":[],"relativePath":"02.服务端/Nginx 相关/nginx-requisite.md","filePath":"02.服务端/Nginx 相关/nginx-requisite.md","lastUpdated":1761308264000}'),h={name:"02.服务端/Nginx 相关/nginx-requisite.md"};function t(r,s,k,d,c,o){return n(),a("div",null,s[0]||(s[0]=[l('<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /docs/02.服务端/Nginx 相关/nginx-requisite.md for this page in Markdown format</div><h1 id="反向代理与负载均衡" tabindex="-1">反向代理与负载均衡 <a class="header-anchor" href="#反向代理与负载均衡" aria-label="Permalink to &quot;反向代理与负载均衡&quot;">​</a></h1><blockquote><p><strong>nginx</strong>是一个高性能的 HTTP 和反向代理服务器，也是一个通用的 TCP/UDP 代理服务器，最初由俄罗斯人<strong>Igor Sysoev</strong>编写。<strong>nginx</strong>在应用程序中的作用有：</p><ul><li>解决跨域</li><li>请求过滤</li><li>配置 gzip</li><li>负载均衡</li><li>静态资源服务器</li></ul></blockquote><h2 id="代理" tabindex="-1">代理 <a class="header-anchor" href="#代理" aria-label="Permalink to &quot;代理&quot;">​</a></h2><blockquote><p> <code>代理</code> 是在服务器和客户端之间架设的一层服务器，代理将接受客户端的请求将它转发给服务器，然后将服务端的响应转发给客户端。不管正向代理还是反向代理，都是实现此功能。<br> &gt;  说到代理，首先我们要明确一个概念，所谓代理就是一个代表、一个渠道；此时就涉及到两个角色，一个是被代理角色，一个是目标角色。<br> &gt;  举个例子：比如说生活中的专卖店，客人到 adidas 专卖店买了一双鞋，这个专卖店就是代理，被代理角色就是 adidas 厂家，目标角色就是用户</p></blockquote><p align="center" class="p-images"><img src="'+e+`"></p><h3 id="正向代理" tabindex="-1">正向代理 <a class="header-anchor" href="#正向代理" aria-label="Permalink to &quot;正向代理&quot;">​</a></h3><blockquote><p>正向代理是一个位于 <strong>客户端</strong> 和 <strong>原始服务器</strong> 之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端</p></blockquote><ul><li><p>正向代理是为我们服务的，也就是为客户端服务的。客户端可以根据正向代理访问到它本身无法访问到的服务器资源。</p></li><li><p>正向代理对我们是透明的，对服务端是不透明的，服务端不知道自己收到的是来自代理的访问还是真是的客户端的访问。</p></li><li><p>举个例子：我们经常说的翻墙就是正向代理，在如今的网络环境下，我们如果由于技术需要要去访问国外的某些网站，此时你会发现位于国外的某网站我们通过浏览器是没有办法访问的。此时大家可能都会用一个操作 翻墙 进行访问，翻墙 的方式主要是找到一个可以访问国外网站的代理服务器，我们将请求发送给代理服务器，代理服务器去访问国外的网站，然后将访问到的数据传递给我们</p></li><li><p>特点</p><ol><li>正向代理最大的特点是客户端非常明确要访问的服务器地址</li><li>服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端</li><li>正向代理模式屏蔽或者隐藏了真实客户端信息</li></ol></li><li><p>用途</p><ol><li>访问原来无法访问的资源，如 Google</li><li>可以做缓存，加速访问资源</li><li>对客户端访问授权，上网进行认证</li><li>代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</li></ol></li></ul><h3 id="反向代理" tabindex="-1">反向代理 <a class="header-anchor" href="#反向代理" aria-label="Permalink to &quot;反向代理&quot;">​</a></h3><blockquote><p>正向代理隐藏了客户端的信息，那么反向代理正好相反，隐藏了服务端的信息，客户端反问一个台代理服务器，然后由代理服务器把请求转发到相应的服务器上</p></blockquote><ul><li><p>反向代理经常被用来隐藏服务器安全，为了安全我们的服务一般都不会对外开放，此时我们需要一台对外开放的服务器，来做各种请求的转发，接受一条来自外界的请求，代理服务器负责转发到相应的内网服务器进行处理</p></li><li><p>反向代理，<code>它代理的是服务端</code>，主要用于服务器集群分布式部署的情况下，反向代理隐藏了服务器的信息。</p></li><li><p>举个栗子：在我们拨打 10086 客服电话，可能一个地区的 10086 客服有几个或者几十个，你永远都不需要关心在电话那头的是哪一个，你只需要拨通了 10086 的总机号码，电话那头总会有人会回答你。那么这里的 10086 总机号码就是我们说的 <strong>反向代理</strong>，客户不知道真正提供服务人的是谁。</p></li><li><p>用途</p><ol><li>保证内网的安全，通常将方向代理作为公网访问地址，web 服务是内网</li><li>负载均衡，通过反向代理服务器来优化网站的负载。</li></ol></li><li><p>假如现在访问我的网站就是访问 www.baidu.com，配置入戏</p></li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 监听端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      proxy_pass</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  http://www.baidu.com</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="集群与负载均衡简单了解" tabindex="-1">集群与负载均衡简单了解 <a class="header-anchor" href="#集群与负载均衡简单了解" aria-label="Permalink to &quot;集群与负载均衡简单了解&quot;">​</a></h2><ul><li>集群：一组松散或紧密连接在一起工作的计算机。 由于这些计算机协同工作，在许多方面它们可以被视为单个系统。 与网格计算机不同，计算机集群将每个节点设置为执行相同的任务，由软件控制和调度。（摘自百度百科）</li><li>简单理解集群就是：多个服务器一起为某个服务工作；</li><li>负载均衡：高可用网络基础架构的关键组件，通常用于将工作负载分布到多个服务器来提高网站、应用、数据库或其他服务的性能和可靠性。（摘自知乎）</li><li>简单理解负载均衡就是： <ul><li>我们有一堆服务器处理相同的服务，这是集群，</li><li>他们可以 ip 一样端口不一样，也可以不同的服务器端口一样的，</li><li>比如说有两台服务器处理相同的服务，一台端口为 8888，一台端口为 7777，</li><li>这两台服务器就是一个集群，这时候会有 多种算法 使我们访问这个服务的时候到底去请求那个端口的服务，</li><li>这个算法可以是一个请求发给 8888，一个发给 7777；</li><li>假如 8888 性能好点十核的服务，7777 是一核的，也可以十个请求给 8888 一个请求给 7777，有不同的算法来不同的处理。那我们怎么配置呢</li></ul></li><li>首先，简单配置如下</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 配置都在http模块里面</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  http</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # ...省略其他配置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 配置集群，webserver是我们给集群起的名字</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webserver</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:8888</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:7777</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 配置负载均衡</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      listen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      server_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 这里传入集群的名字</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        proxy_pass</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  http://webserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="负载均衡调度算法" tabindex="-1">负载均衡调度算法 <a class="header-anchor" href="#负载均衡调度算法" aria-label="Permalink to &quot;负载均衡调度算法&quot;">​</a></h2><blockquote><p>接下来，我们写四台简单的服务器，来进行测试，四个服务器的端口分别是 <code>3333、4444、5555、6666</code>，他们都返回自身的端口号，然后我们在进行 <code>nginx</code> 调度配置，先把四台服务器跑起来</p></blockquote><p align="center" class="p-images"><img src="`+p+`"></p><h3 id="轮询-默认" tabindex="-1">轮询（默认） <a class="header-anchor" href="#轮询-默认" aria-label="Permalink to &quot;轮询（默认）&quot;">​</a></h3><ul><li>每个请求按照时间顺序逐一分配到不同的服务器，如果服务器宕机，则自动剔除</li><li>简单配置一个，访问网站 <code>/testserver</code> 每次都返回不同的内容</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 默认配置就是轮询</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  http</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # .... 省略其余配置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 测试集群策略</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test_server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:3333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:4444</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:5555</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:6666</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      listen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      server_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 省略....</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 集群配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /testserver</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        proxy_pass</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://test_server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="权重-weight" tabindex="-1">权重 weight <a class="header-anchor" href="#权重-weight" aria-label="Permalink to &quot;权重 weight&quot;">​</a></h3><ul><li>使用 <code>weight</code> 指定轮询几率，<code>weight</code> 和访问比率成正比，用于后端服务器性能不均的情况。</li><li>权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。</li><li>配置一个实现，访问网站 10 次，四个端口按照 1:2:3:4 的比例进行访问</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 只需要在定义的集群服务器后面写上权重值就可以了</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test_server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:3333</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weight=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:4444</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weight=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:5555</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weight=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:6666</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weight=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="ip-hash-策略" tabindex="-1">ip_hash 策略 <a class="header-anchor" href="#ip-hash-策略" aria-label="Permalink to &quot;ip_hash 策略&quot;">​</a></h3><ul><li>使用 <code>ip_hash</code> 定义服务器的调度</li><li>每个请求按照发起客户端的 <code>ip</code> 的 <code>hash</code> 结果进行匹配，这样的算法下一个固定 <code>ip</code> 地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下 <code>Session</code> 共享的问题</li><li>配置也很简单，只需要在定义集群服务上面加上 <code>ip_hash</code> 即可</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # ip_hash 策略</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test_server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 这样做，谁访问的那个服务器，为了避免 session 不共享的问题，这个人基本上会被一直代理到他所访问到的服务器上</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ip_hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:3333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:4444</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:5555</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:6666</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="其他策略" tabindex="-1">其他策略 <a class="header-anchor" href="#其他策略" aria-label="Permalink to &quot;其他策略&quot;">​</a></h3><ul><li>除了以上三种调度策略外，还有其他的调度算法，但是那些需要依赖第三方插件，简单介绍下</li><li><code>fair</code> 策略：按后端服务器的响应时间来分配请求，响应时间短的优先分配。</li><li><code>url_hash</code> 策略：按访问 url 的 hash 结果来分配请求，使每个 url 定向到同一个后端服务器，后端服务器为缓存时比较有效。</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # fair 策略（第三方）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test_server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:3333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:4444</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:5555</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:6666</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # url_hash（第三方）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test_server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:3333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:4444</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:5555</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:6666</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $request_uri;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    hash_method</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> crc32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="定义负载均衡设备的-ip-及设备状态" tabindex="-1">定义负载均衡设备的 Ip 及设备状态 <a class="header-anchor" href="#定义负载均衡设备的-ip-及设备状态" aria-label="Permalink to &quot;定义负载均衡设备的 Ip 及设备状态&quot;">​</a></h3><ul><li><code>nginx</code> 支持同时设置多组的负载均衡，用来给不用的 <code>server</code> 来使用</li><li>配置如下：</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test_server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ip_hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:3333</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:4444</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weight=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:5555</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:6666</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> backup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>设备的状态值： <ol><li><code>down</code>：表示当前设备暂时不参与负载</li><li><code>weight</code>：默认为 1。<code>weight</code> 越大，负载的权重就越大</li><li><code>max_fails</code>：允许请求失败的次数默认为 1。当超过最大次数时，返回 <code>proxy_next_upstream</code> 模块定义的错误</li><li><code>fail_timeout:max_fails</code>：次失败后，暂停的时间</li><li><code>backup</code>：其它所有的非 <code>backup</code> 机器 <code>down</code> 或者忙的时候，请求 <code>backup</code> 机器。所以这台机器压力会最轻</li></ol></li></ul><p>本文章参考链接如下:</p><ul><li><a href="https://blog.51cto.com/wangwei007/1103727" target="_blank" rel="noreferrer">Nginx upstream 的几种分配方式</a></li><li><a href="https://www.cnblogs.com/wcwnina/p/8728391.html" target="_blank" rel="noreferrer">Nginx 相关介绍(Nginx 是什么?能干嘛?)</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIyMDkwODczNw==&amp;mid=2247485444&amp;idx=1&amp;sn=f142dc529b3bd4ad2813cbfd5e021e07&amp;chksm=97c595aaa0b21cbc72b9b15d42f24a435f24b1bb10acdecb84587390f58369f4a6c7e5873eda&amp;mpshare=1&amp;scene=24&amp;srcid=&amp;sharer_sharetime=1573177641385&amp;sharer_shareid=173a9b33fbb44b987bd7c4d69f782a28#rd" target="_blank" rel="noreferrer">nginx 反向代理和负载均衡策略实战案例</a></li></ul>`,37)]))}const b=i(h,[["render",t]]);export{g as __pageData,b as default};
