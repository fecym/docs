import{_ as i,c as a,o as r,aN as l}from"./chunks/framework.B3J4P44d.js";const t="/docs/imgs/nginx-location-conf.png",d=JSON.parse('{"title":"Nginx 常用配置","description":"","frontmatter":{"title":"Nginx 常用配置","date":"2019-07-10T00:00:00.000Z","permalink":"/service/nginx","tags":["Nginx"],"categories":["Nginx"]},"headers":[],"relativePath":"02.服务端/Nginx 相关/nginx.md","filePath":"02.服务端/Nginx 相关/nginx.md","lastUpdated":1761308264000}'),o={name:"02.服务端/Nginx 相关/nginx.md"};function n(s,e,p,h,c,u){return r(),a("div",null,e[0]||(e[0]=[l('<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /docs/02.服务端/Nginx 相关/nginx.md for this page in Markdown format</div><h1 id="nginx-常用配置" tabindex="-1">Nginx 常用配置 <a class="header-anchor" href="#nginx-常用配置" aria-label="Permalink to &quot;Nginx 常用配置&quot;">​</a></h1><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><ul><li>安装就暂时略过了，记录一下配置</li></ul><h2 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h2><ul><li>做了软链接或者配置了 nginx 的环境变量可以用以下语法，没有话就需要指定到 nginx 所在的目录</li><li><strong>nginx -s stop</strong> 停止 nginx</li><li><strong>nginx -s quit</strong> 退出 nginx</li><li><strong>nginx -s reload</strong> 重新加载配置（修改配置文件后）</li><li><strong>nginx -s reopen</strong> 重启 nginx</li><li><strong>nginx -v</strong> 查看版本</li><li><strong>nginx -t</strong> 查看配置文件目录，检测配置文件是否有语法错误，然后退出</li></ul><h2 id="nginx-conf-配置文件" tabindex="-1">nginx.conf 配置文件 <a class="header-anchor" href="#nginx-conf-配置文件" aria-label="Permalink to &quot;nginx.conf 配置文件&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">提示</p><p>Nginx 配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL 匹配特定位置后的设置），每部分包含若干个指令。main 部分设置的指令将影响其它所有部分的设置；server 部分的指令主要用于指定虚拟主机域名、IP 和端口；upstream 的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；location 部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。他们之间的关系式：server 继承 main，location 继承 server；upstream 既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。</p></div><h2 id="main-全局配置" tabindex="-1">main 全局配置 <a class="header-anchor" href="#main-全局配置" aria-label="Permalink to &quot;main 全局配置&quot;">​</a></h2><blockquote><p>nginx 在运行时与具体业务（比如 http 服务或者 email 服务代理）无关的参数，比如工作进程数、运行身份等</p></blockquote><h3 id="woker-processes" tabindex="-1">woker_processes <a class="header-anchor" href="#woker-processes" aria-label="Permalink to &quot;woker_processes&quot;">​</a></h3><ul><li>在配置文件的顶级<em>main</em>部分，worker 角色的工作进程的个数，master 进程是接收并分配请求给 worker 处理。这个数据简单一点可以设置为 CPU 的核数 <em>grep ^processor /proc/cpuinfo | wc -l</em>，也是<em>auto</em>值。如果开启了 ssl 和 gzip 更应该设置成与逻辑 CPU 数量一样甚至为 2 倍，可以减少 I/O 操作，如果 nginx 服务器还有其他服务，可以适当减少。</li></ul><h3 id="worker-cpu-affinity" tabindex="-1">worker_cpu_affinity <a class="header-anchor" href="#worker-cpu-affinity" aria-label="Permalink to &quot;worker_cpu_affinity&quot;">​</a></h3><ul><li>也是写在 main 部分。在高并发情况下，通过设置 cpu 粘性来降低由于多 CPU 核切换造成的寄存器等现场重建带来的性能损耗。如<em>worker_cpu_affinity 0001 0010 0100 1000</em>; （四核）。</li></ul><h3 id="worker-connections-2048" tabindex="-1">worker_connections 2048 <a class="header-anchor" href="#worker-connections-2048" aria-label="Permalink to &quot;worker_connections 2048&quot;">​</a></h3><ul><li>在 <strong>events</strong> 部分。每一个 worker 进程能并发处理（发起）的最大连接数（包括与客户端或后端被代理服务器间等所有的连接数）。</li><li>nginx 作为反向代理服务器，计算公式 _最大连接数 = worker_processes _ worker_connections / 4*，所以这里客户端最大连接数是 1024，这个可以增加到 8192 都没关系，但是不能超过后面的 *worker_rlimit_nofile*。</li><li>当 nginx 作为 http 服务器时，计算公式都除以 2</li></ul><h3 id="worker-rlimit-nofile-10240" tabindex="-1">worker_rlimit_nofile 10240 <a class="header-anchor" href="#worker-rlimit-nofile-10240" aria-label="Permalink to &quot;worker_rlimit_nofile 10240&quot;">​</a></h3><ul><li>写在 main 部分。默认是没有设置，可以限制为操作系统最大的限制 65535。</li></ul><h3 id="use-epoll" tabindex="-1">use epoll <a class="header-anchor" href="#use-epoll" aria-label="Permalink to &quot;use epoll&quot;">​</a></h3><ul><li>写在 events 部分。在 Linux 操作系统下，nginx 默认使用 epoll 事件模型，得益于此，nginx 在 Linux 操作系统下效率相当高。同时 Nginx 在 OpenBSD 或 FreeBSD 操作系统上采用类似于 epoll 的高效事件模型 kqueue。在操作系统不支持这些高效模型时才使用 select。</li></ul><h2 id="http-服务器" tabindex="-1">http 服务器 <a class="header-anchor" href="#http-服务器" aria-label="Permalink to &quot;http 服务器&quot;">​</a></h2><blockquote><p>与提供 http 服务相关的一些配置参数。例如：是否使用<em>keeplive</em>，是否使用<em>gzip</em>进行压缩等</p></blockquote><h3 id="sendfile-on" tabindex="-1">sendfile on <a class="header-anchor" href="#sendfile-on" aria-label="Permalink to &quot;sendfile on&quot;">​</a></h3><ul><li>开启高效的文件传输模式，sendfile 指令指定 nginx 是否调用 sendfile 函数来传输文件，减少用户空间到内核空间的上下文切换。</li><li>对于普通应用设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，以平衡磁盘与网络 I/O 处理速度，减低系统的负载</li></ul><h3 id="keeplive-timeout-65" tabindex="-1">keeplive_timeout 65 <a class="header-anchor" href="#keeplive-timeout-65" aria-label="Permalink to &quot;keeplive_timeout 65&quot;">​</a></h3><ul><li>长连接超时时间，单位是秒。</li><li>这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s 内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。</li></ul><h3 id="send-timeout" tabindex="-1">send_timeout <a class="header-anchor" href="#send-timeout" aria-label="Permalink to &quot;send_timeout&quot;">​</a></h3><ul><li>用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx 将会关闭连接。</li></ul><h3 id="client-max-body-size-10m" tabindex="-1">client_max_body_size 10m <a class="header-anchor" href="#client-max-body-size-10m" aria-label="Permalink to &quot;client_max_body_size 10m&quot;">​</a></h3><ul><li>允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</li></ul><h3 id="client-body-buffer-size-128k" tabindex="-1">client_body_buffer_size 128k <a class="header-anchor" href="#client-body-buffer-size-128k" aria-label="Permalink to &quot;client_body_buffer_size 128k&quot;">​</a></h3><ul><li>缓冲区代理缓冲用户端请求的最大字节数</li></ul><h3 id="模块-http-proxy" tabindex="-1">模块 http_proxy <a class="header-anchor" href="#模块-http-proxy" aria-label="Permalink to &quot;模块 http_proxy&quot;">​</a></h3><blockquote><p>这个模块实现的是 nginx 作为反向代理服务器的功能，包括缓存功能（<a href="http://seanlook.com/2015/06/02/nginx-cache-check/" target="_blank" rel="noreferrer">传送门</a>）</p></blockquote><ul><li><p><em>proxy_connect_timeout 60</em></p><ul><li>nginx 跟后端服务器连接超时时间(代理连接超时)</li></ul></li><li><p><em>proxy_read_timeout 60</em></p><ul><li>连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)</li></ul></li><li><p><em>proxy_buffer_size 4k</em></p><ul><li>设置代理服务器（nginx）从后端 realserver 读取并保存用户头信息的缓冲区大小，默认与 proxy_buffers 大小相同，其实可以将这个指令值设的小一点</li></ul></li><li><p><em>proxy_buffers 4 32k</em></p><ul><li>proxy_buffers 缓冲区，nginx 针对单个连接缓存来自后端 realserver 的响应，网页平均在 32k 以下的话，这样设置</li></ul></li><li><p><em>proxy_busy_buffers_size 64k</em></p><ul><li>高负荷下缓冲大小（proxy_buffers*2）</li></ul></li><li><p><em>proxy_max_temp_file_size</em></p><ul><li>当 proxy_buffers 放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认 1024M，它与 proxy_cache 没有关系。大于这个值，将从 upstream 服务器传回。设置为 0 禁用。</li></ul></li><li><p><em>proxy_temp_file_write_size 64k</em></p><ul><li>当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。proxy_temp_path（可以在编译的时候）指定写到哪那个目录。</li></ul></li><li><p><em>proxy_pass，proxy_redirect</em> 见 <a href="#location">location</a> 部分。</p></li></ul><h3 id="模块-http-gzip" tabindex="-1">模块 http_gzip <a class="header-anchor" href="#模块-http-gzip" aria-label="Permalink to &quot;模块 http_gzip&quot;">​</a></h3><ul><li>gzip on：开启 gzip 压缩输出，减少网络传输。 <ul><li><strong>gzip_min_length 1k</strong>：设置允许压缩的页面最小字节数，页面字节数从 header 头得 content-length 中进行获取。默认值是 20。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大。</li><li><strong>gzip_buffers 4 16k</strong>：设置系统获取几个单位的缓存用于存储 gzip 的压缩结果数据流。4 16k 代表以 16k 为单位，安装原始数据大小以 16k 为单位的 4 倍申请内存。</li><li><strong>gzip_http_version 1.0</strong>：用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。</li><li><strong>gzip_comp_level 6</strong>：gzip 压缩比，1 压缩比最小处理速度最快，9 压缩比最大但处理速度最慢(传输快但比较消耗 cpu)</li><li><strong>gzip_types</strong> ：匹配 mime 类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。</li><li><strong>gzip_proxied any</strong>：Nginx 作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header 头。</li><li><strong>gzip_vary on</strong>：和 http 头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过 gzip 压缩的页面，例如，用 Squid 缓存经过 Nginx 压缩的数据。</li></ul></li></ul><h2 id="server-虚拟主机" tabindex="-1">server 虚拟主机 <a class="header-anchor" href="#server-虚拟主机" aria-label="Permalink to &quot;server 虚拟主机&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">提示</p><p>http 服务上支持若干个虚拟主机。每个虚拟主机一个对应的 server 配置项，配置项里面包含该虚拟主机相关的配置。在提供 mail 服务代理时，也可以建立多个 server。每个 server 通过监听地址或端口来区分</p></div><h3 id="listen" tabindex="-1">listen <a class="header-anchor" href="#listen" aria-label="Permalink to &quot;listen&quot;">​</a></h3><ul><li>监听端口，默认 80，小于 1024 的要以 root 启动。可以为 listen *:80、listen 127.0.0.1:80 形式。</li></ul><h3 id="server-name" tabindex="-1">server_name <a class="header-anchor" href="#server-name" aria-label="Permalink to &quot;server_name&quot;">​</a></h3><ul><li>服务器名，如 localhost、www.example.com，可以通过正则匹配</li></ul><h3 id="模块-http-stream" tabindex="-1">模块 http_stream <a class="header-anchor" href="#模块-http-stream" aria-label="Permalink to &quot;模块 http_stream&quot;">​</a></h3><ul><li>这个模块通过一个简单的调度算法来实现客户端 IP 到后端服务器的负载均衡，upstream 后接负载均衡器的名字，后端 realserver 以 host:port options; 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。</li></ul><h2 id="location" tabindex="-1">location <a class="header-anchor" href="#location" aria-label="Permalink to &quot;location&quot;">​</a></h2><blockquote><p>http 服务中，某些特定的 URL 对应的一系列配置项。</p></blockquote><h3 id="root" tabindex="-1">root <a class="header-anchor" href="#root" aria-label="Permalink to &quot;root&quot;">​</a></h3><ul><li>root /root/project/main;</li><li>定义服务器的默认网站根目录位置。如果 <strong>location</strong> URL 配置的是子目录或文件，root 没什么作用，一般放在<em>server</em>指令里面或者 / 下</li><li>也可以写成<strong>alias</strong>，来匹配，alias /root/cym/project/daily-admin/，但是 location / 不可以写成 alias，否则会是 403</li></ul><p align="center" class="p-images"><img src="'+t+'" height=""></p><h3 id="index" tabindex="-1">index; <a class="header-anchor" href="#index" aria-label="Permalink to &quot;index;&quot;">​</a></h3><ul><li>index index.html index.htm;</li><li>定义路径下默认访问的文件名</li></ul><h3 id="proxy-pass" tabindex="-1">proxy_pass <a class="header-anchor" href="#proxy-pass" aria-label="Permalink to &quot;proxy_pass&quot;">​</a></h3><ul><li><p>proxy_pass <a href="http://127.0.0.1:3000/api/" target="_blank" rel="noreferrer">http://127.0.0.1:3000/api/</a>;</p></li><li><p>请求转向 _<a href="http://127.0.0.1:3000/api/_%EF%BC%8C%E5%8D%B3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E5%AF%B9%E5%BA%94*upstream*%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8" target="_blank" rel="noreferrer">http://127.0.0.1:3000/api/_，即反向代理，对应*upstream*负载均衡器</a></p></li><li><p>proxy_pass <a href="http://wanfangdata.com.cn/" target="_blank" rel="noreferrer">http://wanfangdata.com.cn/</a>;</p></li><li><p>访问代理到 _<a href="http://wanfangdata.com.cn/_" target="_blank" rel="noreferrer">http://wanfangdata.com.cn/_</a> 网站</p></li><li><p>关于 location 匹配规则的写法，可以说尤为关键且基础的，参考文章 <a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/" target="_blank" rel="noreferrer">nginx 配置 location 总结及 rewrite 规则写法</a>;</p></li><li><p><a href="http://seanlook.com/2015/05/17/nginx-install-and-config/" target="_blank" rel="noreferrer">本文章参考 <em>seanlook</em> 的笔记</a></p></li></ul>',54)]))}const g=i(o,[["render",n]]);export{d as __pageData,g as default};
