import{_ as i,c as a,o as n,aN as l}from"./chunks/framework.B3J4P44d.js";const e="/docs/imgs/git/git-1.svg",F=JSON.parse('{"title":"Git 基础篇","description":"","frontmatter":{"title":"Git 基础篇","date":"2025-06-25T00:00:00.000Z","permalink":"/git/git-1","tags":["Git","其他"],"categories":["Git"]},"headers":[],"relativePath":"03.工具/Git 相关/git-1.md","filePath":"03.工具/Git 相关/git-1.md","lastUpdated":1761308264000}'),p={name:"03.工具/Git 相关/git-1.md"};function t(h,s,r,k,d,c){return n(),a("div",null,s[0]||(s[0]=[l('<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /docs/03.工具/Git 相关/git-1.md for this page in Markdown format</div><h1 id="git-基础篇" tabindex="-1">Git 基础篇 <a class="header-anchor" href="#git-基础篇" aria-label="Permalink to &quot;Git 基础篇&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>Git 是目前广泛使用的分布式版本控制系统，在日常开发中经常会用到。 这篇文章记录了一些 Git 的基础知识和常用操作，希望能对大家有所帮助</p><h2 id="文章导览" tabindex="-1">文章导览 <a class="header-anchor" href="#文章导览" aria-label="Permalink to &quot;文章导览&quot;">​</a></h2><p align="center"><img src="'+e+`" alt="文章导览"></p><h2 id="git-简介" tabindex="-1">Git 简介 <a class="header-anchor" href="#git-简介" aria-label="Permalink to &quot;Git 简介&quot;">​</a></h2><p>Git 是一个 <strong>分布式版本控制系统</strong>，最初由 Linux 之父 Linus Torvalds 编写。它可以帮助我们跟踪代码的修改历史、多人协作开发，并在出问题时迅速回滚。</p><blockquote><p>✅ <strong>Git vs SVN</strong>：Git 是分布式的，每个开发者都有完整历史记录；SVN 是集中式的，依赖服务器。 git 与区块链一样都是去中心化的思想，理论上操作不可逆。每个人都有自己的操作节点</p></blockquote><h2 id="git-基础概念" tabindex="-1">Git 基础概念 <a class="header-anchor" href="#git-基础概念" aria-label="Permalink to &quot;Git 基础概念&quot;">​</a></h2><ul><li><strong>工作区（Working Directory）</strong>：电脑上看到的文件夹。</li><li><strong>暂存区（Staging Area）</strong>：准备提交的文件列表。</li><li><strong>本地仓库（Local Repository）</strong>：本机的 <code>.git</code> 目录。</li><li><strong>远程仓库（Remote Repository）</strong>：比如 GitHub、GitLab 上托管的项目。</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>工作区 → 暂存区 → 本地仓库 → 远程仓库</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><strong>HEAD</strong>：当前指向的提交或分支。</li><li><strong>origin</strong>：默认远程仓库别名。</li></ul><h2 id="git-安装与配置" tabindex="-1">Git 安装与配置 <a class="header-anchor" href="#git-安装与配置" aria-label="Permalink to &quot;Git 安装与配置&quot;">​</a></h2><h3 id="安装方式" tabindex="-1">安装方式 <a class="header-anchor" href="#安装方式" aria-label="Permalink to &quot;安装方式&quot;">​</a></h3><ul><li>Windows：访问 <a href="https://git-scm.com" target="_blank" rel="noreferrer">https://git-scm.com</a> 下载并安装</li><li>macOS：使用 Homebrew 安装：<code>brew install git</code></li></ul><h3 id="初始化配置" tabindex="-1">初始化配置 <a class="header-anchor" href="#初始化配置" aria-label="Permalink to &quot;初始化配置&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;你的名字&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;你的邮箱&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init.defaultBranch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>--global</code> 参数表示全局配置，不添加 <code>--global</code> 表示当前目录配置(存在 .git 的目录)</p><h3 id="配置进阶" tabindex="-1">配置进阶 <a class="header-anchor" href="#配置进阶" aria-label="Permalink to &quot;配置进阶&quot;">​</a></h3><p>Git 的配置远不止用户名和邮箱，以下是一些实用的配置：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置编辑器（推荐使用 VS Code）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.editor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;code --wait&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置换行符处理（重要！避免跨平台问题）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.autocrlf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Windows 系统</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.autocrlf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # Mac/Linux 系统</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置推送策略</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push.default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> simple</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置颜色输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> color.ui</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> auto</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看所有配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="git-常用命令" tabindex="-1">Git 常用命令 <a class="header-anchor" href="#git-常用命令" aria-label="Permalink to &quot;Git 常用命令&quot;">​</a></h2><p>在介绍命令之前，有个注意事项要提前声明下: <code>使用 Git 一定要有去中心化的思想，一旦 push 到远程仓库后，想要撤销修改就需要考虑到其他用户，不可轻易使用 git push -f，使用该命令前一定要与其他同事确认，并有对应的，否则会丢代码!</code></p><h3 id="仓库操作" tabindex="-1">仓库操作 <a class="header-anchor" href="#仓库操作" aria-label="Permalink to &quot;仓库操作&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               # 初始化本地仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 克隆远程仓库</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="代码提交" tabindex="-1">代码提交 <a class="header-anchor" href="#代码提交" aria-label="Permalink to &quot;代码提交&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # 添加所有更改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;说明&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 提交更改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # 查看状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> diff</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               # 查看改动</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="add" tabindex="-1">add <a class="header-anchor" href="#add" aria-label="Permalink to &quot;add&quot;">​</a></h4><ul><li><code>git add</code> 添加要提交的文件，一般常用 <code>git add .</code></li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加单个文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">filenam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加多个文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">1&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">2&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">3&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加所有文件（包括新增和修改）如果文件已经在 .gitignore 文件中了，则不会被添加</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加某个目录下的内容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">directory_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加被忽略的文件 (.gitignore 中的文件)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">filenam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看哪些文件会被添加 (模拟执行 git add .，不会真正添加任何文件)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li>已经 add 的文件，可以使用 <code>git restore --staged &lt;file&gt;</code> 命令取消添加，该命令可以取消对文件的添加，但是不会删除文件，也不会删除文件修改的内容。</li><li>如果本地某个修改不想要了，要恢复到修改之前，可以使用 <code>git checkout &lt;file&gt;</code>，都不要可以使用 <code>git checkout .</code> (这个操作不会恢复已经 add 的文件哦)</li><li><code>.</code> 和 <code>-A</code> 的区别在于: <code>-A</code> 会添加所有变化 <code>.</code> 只会添加添加当前目录及其子目录的所有变化，如果是上级目录的修改是不会被添加的</li></ul><h4 id="commit" tabindex="-1">commit <a class="header-anchor" href="#commit" aria-label="Permalink to &quot;commit&quot;">​</a></h4><ul><li>提交信息规范，建议使用 <code>git commit -m &quot;feat: 新功能&quot;</code> 或 <code>git commit -m &quot;fix: 修复 bug&quot;</code>，具体有以下几种:</li></ul><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;feat&quot;:     &quot;特性:     ✨  新增功能&quot;,</span></span>
<span class="line"><span>  &quot;fix&quot;:      &quot;修复:     🐛  修复缺陷&quot;,</span></span>
<span class="line"><span>  &quot;docs&quot;:     &quot;文档:     📝  文档变更(更新README文件，或者注释)&quot;,</span></span>
<span class="line"><span>  &quot;style&quot;:    &quot;格式:     🌈  代码格式（空格、格式化、缺失的分号等）&quot;,</span></span>
<span class="line"><span>  &quot;refactor&quot;: &quot;重构:     🔄  代码重构（不修复错误也不添加特性的代码更改）&quot;,</span></span>
<span class="line"><span>  &quot;perf&quot;:     &quot;性能:     🚀  性能优化&quot;,</span></span>
<span class="line"><span>  &quot;test&quot;:     &quot;测试:     🧪  添加疏漏测试或已有测试改动&quot;,</span></span>
<span class="line"><span>  &quot;build&quot;:    &quot;构建:     📦️  构建流程、外部依赖变更（如升级 npm 包、修改 vite 配置等）&quot;,</span></span>
<span class="line"><span>  &quot;ci&quot;:       &quot;集成:     ⚙️   修改 CI 配置、脚本&quot;,</span></span>
<span class="line"><span>  &quot;revert&quot;:   &quot;回退:     ↩️   回滚 commit&quot;,</span></span>
<span class="line"><span>  &quot;chore&quot;:    &quot;其他:     🛠️   对构建过程或辅助工具和库的更改（不影响源文件、测试用例）&quot;,</span></span>
<span class="line"><span>  &quot;wip&quot;:      &quot;开发中:   🚧  开发阶段临时提交&quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>平时开发中常用的有: <code>feat</code>、<code>fix</code>、<code>style</code>、<code>revert</code>、<code>wip</code></p><ul><li>修改提交信息：</li></ul><p>代码提交后，想要修改下提交信息，可以使用 <code>git commit --amend</code>，会弹出一个 vi 编辑器，将修改后的提交信息保存并提交。 如果已经 push 到远程仓库，想要修改的话，也是一样，但是需要 <code>git push --force</code> 强制推送到远程仓库(⚠️ 慎用)。</p><h4 id="status" tabindex="-1">status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;status&quot;">​</a></h4><p>git status 可以查看当前仓库状态，会显示当前分支、未暂存的文件、暂存的文件、当前分支的提交记录。当我们不知所措的时候使用该命令也会给我们相应的提示</p><h4 id="diff" tabindex="-1">diff <a class="header-anchor" href="#diff" aria-label="Permalink to &quot;diff&quot;">​</a></h4><p>git diff 可以查看当前仓库的改动，会显示当前分支的提交记录和暂存区的改动。如果已经 add 过则需要 <code>git diff &lt;hash&gt;</code> 来显示改动。</p><h3 id="临时暂存" tabindex="-1">临时暂存 <a class="header-anchor" href="#临时暂存" aria-label="Permalink to &quot;临时暂存&quot;">​</a></h3><ul><li>在开发新的需求的过程中，会经常遇到已经提测的需求有 bug 要优先处理，但是本地开发一半的代码，又不想提交到远程仓库，此时就会用到 <code>git stash</code> 命令</li><li>这个命令会将当前暂存区的改动暂存到 stash 栈中，然后本地暂存区干净了，就可以切换到对应的分支去修改 bug，修复完之后，再回到原来的分支使用 stash 恢复刚才暂存的文件</li><li>使用方式如下:</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 把工作区和暂存区的改动放到 stash 栈中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;说明&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者（已弃用，不推荐使用）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;说明&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 恢复 stash 的栈顶的最近一次 stash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pop</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看 stash 栈，会返回类似于 stash@{0}: On main: 说明 的一个列表</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定恢复对应的 stash，比如恢复 stash@{0} 的改动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stash@{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="择优挑选" tabindex="-1">择优挑选 <a class="header-anchor" href="#择优挑选" aria-label="Permalink to &quot;择优挑选&quot;">​</a></h3><p><code>git cherry-pick</code> 是 Git 中一个非常实用的命令，用于将某个分支上的特定提交（commit）复制到当前所在的分支上。它允许你有选择性地将某些提交引入到不同的分支中，而不需要合并整个分支的所有改动。</p><p>语法: <code>git cherry-pick &lt;commit_id&gt;</code>，也可以拣选多个提交: <code>git cherry-pick &lt;commit_id1&gt; &lt;commit_id2&gt;</code></p><p>📌 使用场景:</p><ul><li>在稳定版本中加入某个功能或修复 bug ：例如，你想在 v2.0 稳定版本分支中加入 v3.0 开发分支中的某次 bug 修复提交，就可以使用 cherry-pick 来提取这个 commit 。</li><li>避免合并整个分支 ：当你只想合入其他分支的某些改动，而不是全部历史时，非常适合使用此命令 。</li><li>多分支开发中同步特定提交 ：比如你在 feature 分支做了一些修改，想将其中一部分提交同步到 main 分支 。</li><li>有一点要注意: cherry-pick 会生成新的提交对象，虽然内容相同，但提交哈希值不同，当我们把对应分支合并进来的时候，就会有两个提交信息是一样的，虽然他们的哈希值不同</li></ul><p>⚠️ 冲突处理</p><p>如果在 cherry-pick 过程中发生冲突，Git 会暂停操作并提示你解决冲突。</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. 修改冲突文件，手动解决冲突</span></span>
<span class="line"><span>2. 运行 git add &lt;file&gt; 添加修改后的文件</span></span>
<span class="line"><span>3. 继续 cherry-pick: git cherry-pick --continue</span></span>
<span class="line"><span>4. 如果你不想继续，可以中止：\`git cherry-pick --abort\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="分支管理" tabindex="-1">分支管理 <a class="header-anchor" href="#分支管理" aria-label="Permalink to &quot;分支管理&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # 查看本地分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 创建 dev 分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 创建并切换到 dev 分支（传统方式）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> switch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 创建并切换到 dev 分支（Git 2.23+ 推荐方式，更安全）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 删除 dev 分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 强制删除 dev 分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 合并 dev 分支到当前分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --delete</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 删除远程分支</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="合并策略" tabindex="-1">合并策略 <a class="header-anchor" href="#合并策略" aria-label="Permalink to &quot;合并策略&quot;">​</a></h4><p>Git 提供了多种合并策略，不同场景下选择合适的策略很重要：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 快进合并（默认）- 如果可能，直接移动指针</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature-branch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 非快进合并（保留分支历史）- 始终创建合并提交</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-ff</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature-branch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 压缩合并 - 将多个提交压缩为一个</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --squash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature-branch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>使用建议</strong>：</p><ul><li><code>--no-ff</code>：适合功能分支合并，保留完整的分支历史</li><li><code>--squash</code>：适合将实验性的多个提交整理为一个干净的提交</li></ul><h4 id="冲突解决" tabindex="-1">冲突解决 <a class="header-anchor" href="#冲突解决" aria-label="Permalink to &quot;冲突解决&quot;">​</a></h4><p>合并分支时经常遇到冲突，以下是完整的解决流程：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 合并时出现冲突</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature-branch</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Auto-merging file.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># CONFLICT (content): Merge conflict in file.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Automatic merge failed; fix conflicts and then commit the result.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看冲突状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>冲突标记格式</strong>：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HEAD</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">当前分支的内容</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=======</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">要合并分支的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">feature-branch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>解决步骤</strong>：</p><ol><li>手动编辑冲突文件，删除冲突标记，保留需要的内容</li><li>添加解决后的文件：<code>git add &lt;文件名&gt;</code></li><li>提交合并：<code>git commit</code>（会自动生成合并提交信息）</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 解决冲突的完整流程</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # 标记冲突已解决</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               # 完成合并提交</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果不想继续合并，可以中止</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --abort</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="远程操作" tabindex="-1">远程操作 <a class="header-anchor" href="#远程操作" aria-label="Permalink to &quot;远程操作&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 添加远程仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 推送到远程并设置默认分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 拉取远程更新</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # 获取远程更新但不合并</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="标签管理" tabindex="-1">标签管理 <a class="header-anchor" href="#标签管理" aria-label="Permalink to &quot;标签管理&quot;">​</a></h3><p>每次上线、发布、打包，都需要知道：&quot;这次发布的是哪一版？&quot;，<code>git tag v1.0.0 -m &quot;正式发布 1.0.0 版本&quot;</code>，也可以方便回滚，一般是上线是使用的</p><p>标签跟分支的操作基本上是一样的</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看所有标签</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  tag</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看标签信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tagnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看符合条件的标签（例如以 v1. 开头）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;v1.*&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建标签</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 轻量标签，给某个提交打个书签，没有额外信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tagnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 默认是个当前HEAD 打标签，也可以指定提交：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">commit-has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注释标签，带作者、日期、说明信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tagnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Release version 1.0.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 也可以指定提交</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">commit-has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Release note&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除标签</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tagnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除远程标签</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --delete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tagnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="gitignore-规则详解" tabindex="-1">.gitignore 规则详解 <a class="header-anchor" href="#gitignore-规则详解" aria-label="Permalink to &quot;.gitignore 规则详解&quot;">​</a></h3><p><code>.gitignore</code> 文件用于告诉 Git 哪些文件或目录应该被忽略，不纳入版本控制。</p><h4 id="语法规则" tabindex="-1">语法规则 <a class="header-anchor" href="#语法规则" aria-label="Permalink to &quot;语法规则&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基本规则</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.log          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 忽略所有 .log 文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug.log</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 但不忽略 debug.log（感叹号表示例外）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/build</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 只忽略根目录的 build 文件夹</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 忽略任意位置的 build 文件夹</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doc/*.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 忽略 doc 目录下的 .txt 文件（不递归）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doc/**/*.pdf</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 忽略 doc 及其子目录下的 .pdf 文件（递归）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 常用示例</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_modules/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Node.js 依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dist/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 构建输出目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.env</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # 环境变量文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.env.local</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 本地环境变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.log          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 日志文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.pyc          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Python 编译文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__pycache__/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # Python 缓存目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.DS_Store</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # macOS 系统文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Thumbs.db</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # Windows 系统文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.vscode/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # VS Code 配置（可选）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.idea/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # JetBrains IDE 配置（可选）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h4 id="实用技巧" tabindex="-1">实用技巧 <a class="header-anchor" href="#实用技巧" aria-label="Permalink to &quot;实用技巧&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看某个文件是否被忽略，以及被哪条规则忽略</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> check-ignore</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">filenam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看所有被忽略的文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls-files</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --others</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ignored</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --exclude-standard</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 强制添加被忽略的文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">filenam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>⚠️ 注意</strong>：<code>.gitignore</code> 只对未被跟踪的文件有效。如果文件已经被提交过，需要先从跟踪中移除：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 从跟踪中移除但保留本地文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cached</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">filenam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 提交这个移除操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;untrack file&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="回退提交" tabindex="-1">回退提交 <a class="header-anchor" href="#回退提交" aria-label="Permalink to &quot;回退提交&quot;">​</a></h2><h3 id="revert" tabindex="-1">revert <a class="header-anchor" href="#revert" aria-label="Permalink to &quot;revert&quot;">​</a></h3><p>revert 是用于撤销某次提交（commit）的命令。它通过创建一个<code>新的提交</code>来反向应用 指定提交的更改，从而实现撤销效果，而不是直接删除或修改历史提交。</p><p>语法: <code>git revert &lt;commit_id&gt;</code>，<code>&lt;commit_id&gt;</code> 你想撤销的提交的哈希值（可以是 HEAD、HEAD~1 等简写方式）。</p><p>git revert 会基于你要撤销的提交生成一个新的提交 ，这个新提交的内容正好抵消原提交所做的更改。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 撤销最近的一次提交</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> revert</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 撤销指定提交的提交</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> revert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">commit_i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>revert 有几个选项:</p><ol><li><code>--no-commit / -n</code>: 只应用 revert 改动到暂存区，不自动创建提交（适合手动编辑后再提交）</li><li><code>-m</code>: 用于合并提交，需指定父编号，如 <code>-m 1</code> 表示选择第一个父提交</li><li><code>-e</code>: 打开编辑器修改提交信息</li></ol><p>注意: revert 之后，在次 merge 这个提交可能会失效或者冲突</p><p>这是因为:</p><ul><li>当你使用 git revert 撤销一个提交后，Git 并不会删除原始提交，而是创建了一个新的提交 来抵消原始更改。</li><li>-当你后续尝试将原始提交再次合并进来时（比如从另一个分支合并），Git 会认为这个提交已经被处理过了（因为它的更改已经被 revert 提交抵消），于是可能会跳过该提交的更改或者提示冲突：already reverted</li><li>Git 会认为这些更改不需要重复应用。</li><li>可以使用 cherry-pick 或者<code>再 revert 那个 revert 提交</code>来恢复原来的更改</li><li>或者删除掉原来的 revert 提交(rebase -i)</li></ul><h3 id="reset" tabindex="-1">reset <a class="header-anchor" href="#reset" aria-label="Permalink to &quot;reset&quot;">​</a></h3><p>reset 是 Git 中一个非常强大且常用的命令，用于撤销本地的提交、暂存区或工作区更改，但是也是一个特别危险的命令。</p><p>使用场景:</p><ul><li>撤销本地的提交: 在本地有很多临时提交，想要撤销</li><li>本地修改完全不想要了，要跟远端同步</li><li>重置分支</li></ul><p>语法: <code>git reset [--soft | --mixed | --hard] &lt;commit_id&gt;</code></p><table tabindex="0"><thead><tr><th>参数</th><th>效果</th><th>使用场景</th></tr></thead><tbody><tr><td>--soft</td><td>只移动HEAD</td><td>想重新编辑提交信息</td></tr><tr><td>--mixed</td><td>重置暂存区</td><td>想重新选择要提交的文件</td></tr><tr><td>--hard</td><td>重置所有</td><td>完全放弃本地修改</td></tr></tbody></table><p>--soft 和 --mixed 的区别：</p><ul><li><code>--soft</code>：暂存区保持不变，再次提交不需要 add</li><li><code>--mixed</code>：暂存区被清空，再次提交需要重新 add</li></ul><p>--hard 是很危险的参数，一旦 hard reset 很难恢复</p><h3 id="reflog-操作历史记录" tabindex="-1">reflog（操作历史记录） <a class="header-anchor" href="#reflog-操作历史记录" aria-label="Permalink to &quot;reflog（操作历史记录）&quot;">​</a></h3><p>Git reflog 是一个强大的数据恢复工具，记录了本地仓库中 HEAD 和分支引用的变化历史。即使提交被删除了，通过 reflog 也能找回。</p><p>希望大家这辈子都不需要用到这个命令。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看所有操作历史</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reflog</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看指定分支的操作历史</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reflog</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 恢复到指定的历史状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD@{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 恢复被误删的分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> recovered-branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD@{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看某个时间点的状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reflog</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --since=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1 hour ago&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>使用场景</strong>：</p><ul><li>误删提交后的恢复：<code>git reset --hard HEAD@{1}</code></li><li>误删分支后的恢复：先用 reflog 找到分支最后的提交，再重建分支</li><li>rebase 出错后的恢复：回到 rebase 之前的状态</li></ul><p><strong>注意</strong>：reflog 只记录本地操作，不会同步到远程仓库。默认保留 90 天。</p><h3 id="rebase" tabindex="-1">rebase <a class="header-anchor" href="#rebase" aria-label="Permalink to &quot;rebase&quot;">​</a></h3><p>rebase 是 Git 提供的一种交互式变基方式，让你可以对一系列提交进行修改、重排、合并、删除、编辑等操作。</p><p>通常用于： 清理历史（整理提交）、 合并多个提交为一个、修改历史提交信息、删除错误提交、重排提交顺序</p><h4 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h4><p>下面是 <code>rebase -i</code> 的介绍:</p><p>执行 <code>git rebase -i ae6c55b5</code>，commitId 是你希望从哪个提交之后开始变基（不包括该提交本身）。</p><p>此时会打开以下的界面，是 vi 编辑器，修改内容使用 vi 的语法既可</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># pick ae6c55b5 登录页面开发    这个是不包含的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pick</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 123abcd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 修复登录按钮</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pick</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 456efgh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 添加样式优化</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pick</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 789ijkl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 调整接口请求方式</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Commands:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># p，pick &lt;commit&gt; = use commit  使用该提交</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># r，reword &lt;commit&gt; = use commit，but edit the commit message  使用该提交，但修改提交信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># e，edit &lt;commit&gt; = use commit，but stop for amending  使用该提交，但会暂停以便进行修改</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># s，squash &lt;commit&gt; = use commit，squashing into prior commit  使用该提交，将其压缩进前一个提交</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># f，fixup &lt;commit&gt; = like &quot;squash&quot;，but discard this commit&#39;s message  类似 &quot;squash&quot;，但会丢弃该提交的信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># x，exec &lt;command&gt; = run command (the rest of the line) using shell  使用 shell 执行该行后面的命令</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># d，drop &lt;commit&gt; = remove commit  删除该提交</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># l，label &lt;label&gt; = label current HEAD at &lt;label&gt;  给当前 HEAD 打上 &lt;label&gt; 标签</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># t，reset &lt;label&gt; = reset HEAD to &lt;label&gt;  将 HEAD 重置为 &lt;label&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># m，merge [-C &lt;commit&gt;] &lt;label&gt; = create a merge commit  创建一个合并提交</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>每一行表示一个提交。</p><p>可以把每行开头的 pick 替换成其他命令，如：</p><ul><li>reword：修改提交信息</li><li>edit：暂停以修改代码或提交</li><li>squash：把当前提交合并到上一个</li><li>fixup：像 squash，但会丢掉当前提交的信息</li><li>drop：删除这个提交</li></ul><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><ol><li>把后两个提交合并到第一个：</li></ol><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pick</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 123abcd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 修复登录按钮</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">squash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 456efgh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 添加样式优化</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">squash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 789ijkl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 调整接口请求方式</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>保存后，Git 会让你编辑新的提交信息，可以保留其中某些内容或全部合并为一句话</p><ol start="2"><li>修改某个提交信息</li></ol><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pick</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 123abcd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 修复登录按钮</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reword</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 456efgh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 添加样式优化</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pick</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 789ijkl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 调整接口请求方式</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>保存后 Git 会打开编辑器，允许你修改第二条提交的信息。</p><ol start="3"><li>删除某个提交</li></ol><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pick</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 123abcd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 修复登录按钮</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 456efgh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 添加样式优化</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pick</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 789ijkl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 调整接口请求方式</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>456efgh 提交将被删除</p><ul><li>rebase 会重写历史，只建议对本地分支使用，不要对已推送到共享仓库的提交做 rebase。</li><li>操作过程中可能会出现冲突，Git 会提示你解决冲突并继续变基。</li><li>解决冲突后执行：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --continue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><table tabindex="0"><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>pick</td><td>使用该提交</td></tr><tr><td>reword</td><td>修改提交信息</td></tr><tr><td>edit</td><td>修改提交内容（中断）</td></tr><tr><td>squash</td><td>合并为一个提交，保留所有信息</td></tr><tr><td>fixup</td><td>合并为一个提交，丢弃当前信息</td></tr><tr><td>drop</td><td>删除该提交</td></tr></tbody></table><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>恭喜你！🎉 完成了第一篇的学习，现在你已经掌握了 Git 的核心技能：</p><p><strong>基础概念</strong>：理解了工作区、暂存区、本地仓库、远程仓库的关系<br><strong>日常操作</strong>：熟练使用 add、commit、push、pull 等常用命令<br><strong>分支管理</strong>：掌握分支创建、切换、合并和冲突解决<br><strong>版本控制</strong>：学会使用 revert、reset、rebase 进行版本回退<br><strong>团队协作</strong>：了解不同的分支策略和工作流程</p><p>这些知识已经足够你在大部分项目中愉快地使用 Git 了！💪</p><h2 id="下期预告" tabindex="-1">下期预告 <a class="header-anchor" href="#下期预告" aria-label="Permalink to &quot;下期预告&quot;">​</a></h2><p>第二篇我们将深入探讨 Git 的高级特性和实战技巧：</p><p>🔥 <strong>进阶内容预览</strong>：</p><ul><li><strong>Git 内部原理</strong>：深入了解 .git 文件夹的秘密</li><li><strong>协作最佳实践</strong>：分支命名规范、提交信息模板、Code Review 指南</li><li><strong>协作进阶</strong>：大型团队的 Git 工作流和最佳实践</li><li><strong>性能优化与维护</strong>：仓库体检、垃圾回收、GPG 签名等企业级维护</li><li><strong>统计分析</strong>：贡献统计、项目分析、开发效率评估</li><li><strong>故障排查与恢复</strong>：问题诊断技巧、紧急恢复场景、数据找回方法</li></ul><hr><p><strong>💡 学以致用</strong>：建议你现在就创建一个练习项目，把第一篇学到的命令都实际操作一遍。实践是最好的老师！</p><p><strong>🚀 继续关注</strong>：第二篇即将发布，我们将一起探索 Git 的更多奥秘，让你从 Git 用户进阶为 Git 专家！</p><p><em>&quot;路虽远行则将至，事虽难做则必成&quot;</em> —— 加油，Git 高手之路等着你！⭐</p>`,145)]))}const o=i(p,[["render",t]]);export{F as __pageData,o as default};
