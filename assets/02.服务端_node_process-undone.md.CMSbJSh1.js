import{_ as a,c as i,o as e,aN as t}from"./chunks/framework.B3J4P44d.js";const c=JSON.parse('{"title":"Process 对象","description":"","frontmatter":{"title":"Process 对象","date":"2019-06-28T00:00:00.000Z","permalink":"/service/process","private":true,"privateRealm":"common","tags":["node"],"categories":["node"]},"headers":[],"relativePath":"02.服务端/node/process-undone.md","filePath":"02.服务端/node/process-undone.md","lastUpdated":1761308264000}'),n={name:"02.服务端/node/process-undone.md"};function l(r,s,h,d,p,o){return e(),i("div",null,s[0]||(s[0]=[t(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /docs/02.服务端/node/process-undone.md for this page in Markdown format</div><h1 id="process-对象" tabindex="-1">Process 对象 <a class="header-anchor" href="#process-对象" aria-label="Permalink to &quot;Process 对象&quot;">​</a></h1><h2 id="进程对象属性" tabindex="-1">进程对象属性 <a class="header-anchor" href="#进程对象属性" aria-label="Permalink to &quot;进程对象属性&quot;">​</a></h2><table tabindex="0"><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>execPath</td><td>可执行文件的绝对路径，如 <code>/usr/local/bin/node</code></td></tr><tr><td>version</td><td>版本号</td></tr><tr><td>versions</td><td>依赖库的版本号</td></tr><tr><td>platform</td><td>运行平台 darwin(Mac)、freebsd、linux、sunos、win32</td></tr><tr><td>stdin</td><td>标准输入流可读流，默认暂停状态</td></tr><tr><td>stdout</td><td>标准输出流可写流，同步操作</td></tr><tr><td>stderr</td><td>错误输出可写流，同步操作</td></tr><tr><td>argv</td><td>命令行参数，属性为数组</td></tr><tr><td>env</td><td>操作系统的环境信息</td></tr><tr><td>pid</td><td>应用程序的进程 id</td></tr><tr><td>title</td><td>窗口标题</td></tr><tr><td>arch</td><td>处理器架构 arm ia32 x64</td></tr></tbody></table><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><h3 id="memoryusage" tabindex="-1">memoryUsage <a class="header-anchor" href="#memoryusage" aria-label="Permalink to &quot;memoryUsage&quot;">​</a></h3><p>查看内存的使用情况，会返回一个对象，node v8 引擎内存使用量是有上限的，32 位最多是 0.7G；64 位最多使用 1.7G</p><ul><li>rss（resident set size）：所有内存占用，包括指令区和堆栈</li><li>heapTotal：堆占用的内存，包括用到的和未用到的</li><li>heapUsed：用到堆的部分</li><li>external：v8 引擎内部的 C++ 占用的内存（buffer 是单独分配的，属于 external 内存）</li></ul><h3 id="nexttick" tabindex="-1">nextTick <a class="header-anchor" href="#nexttick" aria-label="Permalink to &quot;nextTick&quot;">​</a></h3><p>用于将一个函数推迟到代码所书写的下一个同步方法执行完毕或者异步方法的回调函数开始执行前调用</p><h3 id="chdir" tabindex="-1">chdir <a class="header-anchor" href="#chdir" aria-label="Permalink to &quot;chdir&quot;">​</a></h3><p>chdir 用于修改 node 应用程序中使用的当前工作目录，使用方法： <code>process.chdir(directory)</code></p><h3 id="cwd" tabindex="-1">cwd <a class="header-anchor" href="#cwd" aria-label="Permalink to &quot;cwd&quot;">​</a></h3><p>返回当前目录</p><h3 id="exit" tabindex="-1">exit <a class="header-anchor" href="#exit" aria-label="Permalink to &quot;exit&quot;">​</a></h3><p>退出 node 应用程序的进程</p><h3 id="kill" tabindex="-1">kill <a class="header-anchor" href="#kill" aria-label="Permalink to &quot;kill&quot;">​</a></h3><p>用于向进程发送一个信号</p><ul><li>SIGINT 程序终止（interrupt）信号，在用户输入 INTR 字符（Ctrl + c）时发出，用户通知前台进程组终止进程</li><li>SIGTERM 程序结束（terminate）信号，该信号可以被阻塞和处理，通常用来要求程序自己正常退出，shell 命令 kill 缺省产生这个信号</li></ul><p>用法： <code>process.kill(pid, [signal])</code></p><ul><li>pid 是进程 id，整数类型</li><li>signal 发送的信号，默认是 SIGTERM</li></ul><h3 id="uptime" tabindex="-1">uptime <a class="header-anchor" href="#uptime" aria-label="Permalink to &quot;uptime&quot;">​</a></h3><p>返回当前程序的运行时间</p><h3 id="hrtime" tabindex="-1">hrtime <a class="header-anchor" href="#hrtime" aria-label="Permalink to &quot;hrtime&quot;">​</a></h3><p>测试一个代码段的运行时间，返回两个时间，第一个单位是秒，第二个是纳秒，类似于 <code>console.timeEnd</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> time</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hrtime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> diff</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hrtime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`该程序执行耗时 %d 秒\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, diff[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="exit-事件" tabindex="-1">exit 事件 <a class="header-anchor" href="#exit-事件" aria-label="Permalink to &quot;exit 事件&quot;">​</a></h3><p>当 node 程序退出时会触发进程对象的 exit 事件，可以通过指定事件回调来指定进程退出时所执行的处理</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;exit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node 程序退出了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="uncaughtexception-事件" tabindex="-1">uncaughtException 事件 <a class="header-anchor" href="#uncaughtexception-事件" aria-label="Permalink to &quot;uncaughtException 事件&quot;">​</a></h3><p>当应用程序抛出一个未被捕获的异常时触发进程对象的 <code>uncaughtException</code> 事件，一般不用</p><h2 id="子进程" tabindex="-1">子进程 <a class="header-anchor" href="#子进程" aria-label="Permalink to &quot;子进程&quot;">​</a></h2><blockquote><p>在 node 中，只有一个线程执行所有操作，如果某个操作需要大量消耗 CPU 资源的情况下，后续操作都要等待 <br> 所以在 node 中提供了一个 <code>child_process</code> 模块，通过他可以开启多个子进程，在多个子进程之间可以共享内存空间，可以通过子进程的互相通信来实现信息的交换</p></blockquote><h3 id="spawn" tabindex="-1">spawn <a class="header-anchor" href="#spawn" aria-label="Permalink to &quot;spawn&quot;">​</a></h3><h4 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h4><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">child_process.spawn(command,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [args], [options])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>command：必须指定的参数，指定需要执行的命令</li><li>args：数组，存放了所有运行该命令需要的参数</li><li>options：对象，用于指定开启子进程时使用的选项</li></ul><h3 id="fork-开启子进程" tabindex="-1">fork 开启子进程 <a class="header-anchor" href="#fork-开启子进程" aria-label="Permalink to &quot;fork 开启子进程&quot;">​</a></h3>`,38)]))}const u=a(n,[["render",l]]);export{c as __pageData,u as default};
